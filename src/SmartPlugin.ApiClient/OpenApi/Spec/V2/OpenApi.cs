using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Text;
using System.ComponentModel;

namespace SmartPlugin.ApiClient.OpenApi.Spec.V2
{
    //----------------------
    // <auto-generated>
    //     Generated using the NSwag toolchain v11.17.16.0 (NJsonSchema v9.10.56.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
    // </auto-generated>
    //----------------------

    namespace MyNamespace
    {
#pragma warning disable // Disable all warnings



        /// <summary>General information about the API.</summary>
        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class Info : System.ComponentModel.INotifyPropertyChanged
        {
            private string _title;
            private string _version;
            private string _description;
            private string _termsOfService;
            private Contact _contact;
            private License _license;

            /// <summary>A unique and precise title of the API.</summary>
            [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            public string Title
            {
                get { return _title; }
                set
                {
                    if (_title != value)
                    {
                        _title = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>A semantic version number of the API.</summary>
            [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            public string Version
            {
                get { return _version; }
                set
                {
                    if (_version != value)
                    {
                        _version = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>A longer description of the API. Should be different from the title.  GitHub Flavored Markdown is allowed.</summary>
            [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Description
            {
                get { return _description; }
                set
                {
                    if (_description != value)
                    {
                        _description = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>The terms of service for the API.</summary>
            [Newtonsoft.Json.JsonProperty("termsOfService", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string TermsOfService
            {
                get { return _termsOfService; }
                set
                {
                    if (_termsOfService != value)
                    {
                        _termsOfService = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public Contact Contact
            {
                get { return _contact; }
                set
                {
                    if (_contact != value)
                    {
                        _contact = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("license", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public License License
            {
                get { return _license; }
                set
                {
                    if (_license != value)
                    {
                        _license = value;
                        RaisePropertyChanged();
                    }
                }
            }

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static Info FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<Info>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        /// <summary>Contact information for the owners of the API.</summary>
        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class Contact : System.ComponentModel.INotifyPropertyChanged
        {
            private string _name;
            private string _url;
            private string _email;

            /// <summary>The identifying name of the contact person/organization.</summary>
            [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Name
            {
                get { return _name; }
                set
                {
                    if (_name != value)
                    {
                        _name = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>The URL pointing to the contact information.</summary>
            [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Url
            {
                get { return _url; }
                set
                {
                    if (_url != value)
                    {
                        _url = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>The email address of the contact person/organization.</summary>
            [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Email
            {
                get { return _email; }
                set
                {
                    if (_email != value)
                    {
                        _email = value;
                        RaisePropertyChanged();
                    }
                }
            }

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static Contact FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<Contact>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class License : System.ComponentModel.INotifyPropertyChanged
        {
            private string _name;
            private string _url;

            /// <summary>The name of the license type. It's encouraged to use an OSI compatible license.</summary>
            [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            public string Name
            {
                get { return _name; }
                set
                {
                    if (_name != value)
                    {
                        _name = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>The URL pointing to the license.</summary>
            [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Url
            {
                get { return _url; }
                set
                {
                    if (_url != value)
                    {
                        _url = value;
                        RaisePropertyChanged();
                    }
                }
            }

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static License FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<License>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        /// <summary>information about external documentation</summary>
        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class ExternalDocs : System.ComponentModel.INotifyPropertyChanged
        {
            private string _description;
            private string _url;

            [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Description
            {
                get { return _description; }
                set
                {
                    if (_description != value)
                    {
                        _description = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            public string Url
            {
                get { return _url; }
                set
                {
                    if (_url != value)
                    {
                        _url = value;
                        RaisePropertyChanged();
                    }
                }
            }

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static ExternalDocs FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<ExternalDocs>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class Operation : System.ComponentModel.INotifyPropertyChanged
        {
            private System.Collections.ObjectModel.ObservableCollection<string> _tags;
            private string _summary;
            private string _description;
            private ExternalDocs _externalDocs;
            private string _operationId;
            private System.Collections.ObjectModel.ObservableCollection<string> _produces;
            private System.Collections.ObjectModel.ObservableCollection<string> _consumes;
            private System.Collections.ObjectModel.ObservableCollection<Anonymous2> _parameters;
            private System.Collections.Generic.Dictionary<string, object> _responses = new System.Collections.Generic.Dictionary<string, object>();
            private System.Collections.ObjectModel.ObservableCollection<Anonymous3> _schemes;
            private bool? _deprecated = false;
            private System.Collections.ObjectModel.ObservableCollection<System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<string>>> _security;

            [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.ObjectModel.ObservableCollection<string> Tags
            {
                get { return _tags; }
                set
                {
                    if (_tags != value)
                    {
                        _tags = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>A brief summary of the operation.</summary>
            [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Summary
            {
                get { return _summary; }
                set
                {
                    if (_summary != value)
                    {
                        _summary = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>A longer description of the operation, GitHub Flavored Markdown is allowed.</summary>
            [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Description
            {
                get { return _description; }
                set
                {
                    if (_description != value)
                    {
                        _description = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("externalDocs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public ExternalDocs ExternalDocs
            {
                get { return _externalDocs; }
                set
                {
                    if (_externalDocs != value)
                    {
                        _externalDocs = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>A unique identifier of the operation.</summary>
            [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string OperationId
            {
                get { return _operationId; }
                set
                {
                    if (_operationId != value)
                    {
                        _operationId = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>A list of MIME types the API can produce.</summary>
            [Newtonsoft.Json.JsonProperty("produces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.ObjectModel.ObservableCollection<string> Produces
            {
                get { return _produces; }
                set
                {
                    if (_produces != value)
                    {
                        _produces = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>A list of MIME types the API can consume.</summary>
            [Newtonsoft.Json.JsonProperty("consumes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.ObjectModel.ObservableCollection<string> Consumes
            {
                get { return _consumes; }
                set
                {
                    if (_consumes != value)
                    {
                        _consumes = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.ObjectModel.ObservableCollection<Anonymous2> Parameters
            {
                get { return _parameters; }
                set
                {
                    if (_parameters != value)
                    {
                        _parameters = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("responses", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            public System.Collections.Generic.Dictionary<string, object> Responses
            {
                get { return _responses; }
                set
                {
                    if (_responses != value)
                    {
                        _responses = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("schemes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public System.Collections.ObjectModel.ObservableCollection<Anonymous3> Schemes
            {
                get { return _schemes; }
                set
                {
                    if (_schemes != value)
                    {
                        _schemes = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("deprecated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? Deprecated
            {
                get { return _deprecated; }
                set
                {
                    if (_deprecated != value)
                    {
                        _deprecated = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("security", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.ObjectModel.ObservableCollection<System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<string>>> Security
            {
                get { return _security; }
                set
                {
                    if (_security != value)
                    {
                        _security = value;
                        RaisePropertyChanged();
                    }
                }
            }

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static Operation FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<Operation>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class PathItem : System.ComponentModel.INotifyPropertyChanged
        {
            private string ___referencePath;
            private Operation _get;
            private Operation _put;
            private Operation _post;
            private Operation _delete;
            private Operation _options;
            private Operation _head;
            private Operation _patch;
            private System.Collections.ObjectModel.ObservableCollection<Anonymous2> _parameters;

            [Newtonsoft.Json.JsonProperty("__referencePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string __referencePath
            {
                get { return ___referencePath; }
                set
                {
                    if (___referencePath != value)
                    {
                        ___referencePath = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("get", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public Operation Get
            {
                get { return _get; }
                set
                {
                    if (_get != value)
                    {
                        _get = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("put", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public Operation Put
            {
                get { return _put; }
                set
                {
                    if (_put != value)
                    {
                        _put = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("post", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public Operation Post
            {
                get { return _post; }
                set
                {
                    if (_post != value)
                    {
                        _post = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("delete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public Operation Delete
            {
                get { return _delete; }
                set
                {
                    if (_delete != value)
                    {
                        _delete = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public Operation Options
            {
                get { return _options; }
                set
                {
                    if (_options != value)
                    {
                        _options = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("head", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public Operation Head
            {
                get { return _head; }
                set
                {
                    if (_head != value)
                    {
                        _head = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("patch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public Operation Patch
            {
                get { return _patch; }
                set
                {
                    if (_patch != value)
                    {
                        _patch = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.ObjectModel.ObservableCollection<Anonymous2> Parameters
            {
                get { return _parameters; }
                set
                {
                    if (_parameters != value)
                    {
                        _parameters = value;
                        RaisePropertyChanged();
                    }
                }
            }

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static PathItem FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<PathItem>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class ResponseValue : System.ComponentModel.INotifyPropertyChanged
        {

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static ResponseValue FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<ResponseValue>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class Response : System.ComponentModel.INotifyPropertyChanged
        {
            private string _description;
            private Schema _schema;
            private System.Collections.Generic.Dictionary<string, Header> _headers;
            private object _examples;

            [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            public string Description
            {
                get { return _description; }
                set
                {
                    if (_description != value)
                    {
                        _description = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public Schema Schema
            {
                get { return _schema; }
                set
                {
                    if (_schema != value)
                    {
                        _schema = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("headers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.Generic.Dictionary<string, Header> Headers
            {
                get { return _headers; }
                set
                {
                    if (_headers != value)
                    {
                        _headers = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("examples", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public object Examples
            {
                get { return _examples; }
                set
                {
                    if (_examples != value)
                    {
                        _examples = value;
                        RaisePropertyChanged();
                    }
                }
            }

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static Response FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<Response>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class Header : System.ComponentModel.INotifyPropertyChanged
        {
            private HeaderType _type;
            private string _format;
            private PrimitivesItems _items;
            private CollectionFormat? _collectionFormat;
            private object _default;
            private double? _maximum;
            private bool? _exclusiveMaximum;
            private double? _minimum;
            private bool? _exclusiveMinimum;
            private int? _maxLength;
            private int? _minLength;
            private string _pattern;
            private int? _maxItems;
            private int? _minItems;
            private bool? _uniqueItems;
            private System.Collections.ObjectModel.ObservableCollection<object> _enum;
            private double? _multipleOf;
            private string _description;

            [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public HeaderType Type
            {
                get { return _type; }
                set
                {
                    if (_type != value)
                    {
                        _type = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Format
            {
                get { return _format; }
                set
                {
                    if (_format != value)
                    {
                        _format = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public PrimitivesItems Items
            {
                get { return _items; }
                set
                {
                    if (_items != value)
                    {
                        _items = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("collectionFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public CollectionFormat? CollectionFormat
            {
                get { return _collectionFormat; }
                set
                {
                    if (_collectionFormat != value)
                    {
                        _collectionFormat = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public object Default
            {
                get { return _default; }
                set
                {
                    if (_default != value)
                    {
                        _default = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("maximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public double? Maximum
            {
                get { return _maximum; }
                set
                {
                    if (_maximum != value)
                    {
                        _maximum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("exclusiveMaximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? ExclusiveMaximum
            {
                get { return _exclusiveMaximum; }
                set
                {
                    if (_exclusiveMaximum != value)
                    {
                        _exclusiveMaximum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("minimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public double? Minimum
            {
                get { return _minimum; }
                set
                {
                    if (_minimum != value)
                    {
                        _minimum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("exclusiveMinimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? ExclusiveMinimum
            {
                get { return _exclusiveMinimum; }
                set
                {
                    if (_exclusiveMinimum != value)
                    {
                        _exclusiveMinimum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("maxLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MaxLength
            {
                get { return _maxLength; }
                set
                {
                    if (_maxLength != value)
                    {
                        _maxLength = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("minLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MinLength
            {
                get { return _minLength; }
                set
                {
                    if (_minLength != value)
                    {
                        _minLength = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Pattern
            {
                get { return _pattern; }
                set
                {
                    if (_pattern != value)
                    {
                        _pattern = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("maxItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MaxItems
            {
                get { return _maxItems; }
                set
                {
                    if (_maxItems != value)
                    {
                        _maxItems = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("minItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MinItems
            {
                get { return _minItems; }
                set
                {
                    if (_minItems != value)
                    {
                        _minItems = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("uniqueItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? UniqueItems
            {
                get { return _uniqueItems; }
                set
                {
                    if (_uniqueItems != value)
                    {
                        _uniqueItems = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("enum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.ObjectModel.ObservableCollection<object> Enum
            {
                get { return _enum; }
                set
                {
                    if (_enum != value)
                    {
                        _enum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("multipleOf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public double? MultipleOf
            {
                get { return _multipleOf; }
                set
                {
                    if (_multipleOf != value)
                    {
                        _multipleOf = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Description
            {
                get { return _description; }
                set
                {
                    if (_description != value)
                    {
                        _description = value;
                        RaisePropertyChanged();
                    }
                }
            }

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static Header FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<Header>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class BodyParameter : System.ComponentModel.INotifyPropertyChanged
        {
            private string _description;
            private string _name;
            private BodyParameterIn _in;
            private bool? _required = false;
            private Schema _schema = new Schema();

            /// <summary>A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.</summary>
            [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Description
            {
                get { return _description; }
                set
                {
                    if (_description != value)
                    {
                        _description = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>The name of the parameter.</summary>
            [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            public string Name
            {
                get { return _name; }
                set
                {
                    if (_name != value)
                    {
                        _name = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>Determines the location of the parameter.</summary>
            [Newtonsoft.Json.JsonProperty("in", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public BodyParameterIn In
            {
                get { return _in; }
                set
                {
                    if (_in != value)
                    {
                        _in = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>Determines whether or not this parameter is required or optional.</summary>
            [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? Required
            {
                get { return _required; }
                set
                {
                    if (_required != value)
                    {
                        _required = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            public Schema Schema
            {
                get { return _schema; }
                set
                {
                    if (_schema != value)
                    {
                        _schema = value;
                        RaisePropertyChanged();
                    }
                }
            }

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static BodyParameter FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<BodyParameter>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class HeaderParameterSubSchema : System.ComponentModel.INotifyPropertyChanged
        {
            private bool? _required = false;
            private HeaderParameterSubSchemaIn? _in;
            private string _description;
            private string _name;
            private HeaderParameterSubSchemaType? _type;
            private string _format;
            private PrimitivesItems _items;
            private CollectionFormat? _collectionFormat;
            private object _default;
            private double? _maximum;
            private bool? _exclusiveMaximum;
            private double? _minimum;
            private bool? _exclusiveMinimum;
            private int? _maxLength;
            private int? _minLength;
            private string _pattern;
            private int? _maxItems;
            private int? _minItems;
            private bool? _uniqueItems;
            private System.Collections.ObjectModel.ObservableCollection<object> _enum;
            private double? _multipleOf;

            /// <summary>Determines whether or not this parameter is required or optional.</summary>
            [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? Required
            {
                get { return _required; }
                set
                {
                    if (_required != value)
                    {
                        _required = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>Determines the location of the parameter.</summary>
            [Newtonsoft.Json.JsonProperty("in", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public HeaderParameterSubSchemaIn? In
            {
                get { return _in; }
                set
                {
                    if (_in != value)
                    {
                        _in = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.</summary>
            [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Description
            {
                get { return _description; }
                set
                {
                    if (_description != value)
                    {
                        _description = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>The name of the parameter.</summary>
            [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Name
            {
                get { return _name; }
                set
                {
                    if (_name != value)
                    {
                        _name = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public HeaderParameterSubSchemaType? Type
            {
                get { return _type; }
                set
                {
                    if (_type != value)
                    {
                        _type = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Format
            {
                get { return _format; }
                set
                {
                    if (_format != value)
                    {
                        _format = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public PrimitivesItems Items
            {
                get { return _items; }
                set
                {
                    if (_items != value)
                    {
                        _items = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("collectionFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public CollectionFormat? CollectionFormat
            {
                get { return _collectionFormat; }
                set
                {
                    if (_collectionFormat != value)
                    {
                        _collectionFormat = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public object Default
            {
                get { return _default; }
                set
                {
                    if (_default != value)
                    {
                        _default = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("maximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public double? Maximum
            {
                get { return _maximum; }
                set
                {
                    if (_maximum != value)
                    {
                        _maximum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("exclusiveMaximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? ExclusiveMaximum
            {
                get { return _exclusiveMaximum; }
                set
                {
                    if (_exclusiveMaximum != value)
                    {
                        _exclusiveMaximum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("minimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public double? Minimum
            {
                get { return _minimum; }
                set
                {
                    if (_minimum != value)
                    {
                        _minimum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("exclusiveMinimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? ExclusiveMinimum
            {
                get { return _exclusiveMinimum; }
                set
                {
                    if (_exclusiveMinimum != value)
                    {
                        _exclusiveMinimum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("maxLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MaxLength
            {
                get { return _maxLength; }
                set
                {
                    if (_maxLength != value)
                    {
                        _maxLength = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("minLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MinLength
            {
                get { return _minLength; }
                set
                {
                    if (_minLength != value)
                    {
                        _minLength = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Pattern
            {
                get { return _pattern; }
                set
                {
                    if (_pattern != value)
                    {
                        _pattern = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("maxItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MaxItems
            {
                get { return _maxItems; }
                set
                {
                    if (_maxItems != value)
                    {
                        _maxItems = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("minItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MinItems
            {
                get { return _minItems; }
                set
                {
                    if (_minItems != value)
                    {
                        _minItems = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("uniqueItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? UniqueItems
            {
                get { return _uniqueItems; }
                set
                {
                    if (_uniqueItems != value)
                    {
                        _uniqueItems = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("enum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.ObjectModel.ObservableCollection<object> Enum
            {
                get { return _enum; }
                set
                {
                    if (_enum != value)
                    {
                        _enum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("multipleOf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public double? MultipleOf
            {
                get { return _multipleOf; }
                set
                {
                    if (_multipleOf != value)
                    {
                        _multipleOf = value;
                        RaisePropertyChanged();
                    }
                }
            }

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static HeaderParameterSubSchema FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<HeaderParameterSubSchema>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class QueryParameterSubSchema : System.ComponentModel.INotifyPropertyChanged
        {
            private bool? _required = false;
            private QueryParameterSubSchemaIn? _in;
            private string _description;
            private string _name;
            private bool? _allowEmptyValue = false;
            private QueryParameterSubSchemaType? _type;
            private string _format;
            private PrimitivesItems _items;
            private CollectionFormatWithMulti? _collectionFormat;
            private object _default;
            private double? _maximum;
            private bool? _exclusiveMaximum;
            private double? _minimum;
            private bool? _exclusiveMinimum;
            private int? _maxLength;
            private int? _minLength;
            private string _pattern;
            private int? _maxItems;
            private int? _minItems;
            private bool? _uniqueItems;
            private System.Collections.ObjectModel.ObservableCollection<object> _enum;
            private double? _multipleOf;

            /// <summary>Determines whether or not this parameter is required or optional.</summary>
            [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? Required
            {
                get { return _required; }
                set
                {
                    if (_required != value)
                    {
                        _required = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>Determines the location of the parameter.</summary>
            [Newtonsoft.Json.JsonProperty("in", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public QueryParameterSubSchemaIn? In
            {
                get { return _in; }
                set
                {
                    if (_in != value)
                    {
                        _in = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.</summary>
            [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Description
            {
                get { return _description; }
                set
                {
                    if (_description != value)
                    {
                        _description = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>The name of the parameter.</summary>
            [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Name
            {
                get { return _name; }
                set
                {
                    if (_name != value)
                    {
                        _name = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>allows sending a parameter by name only or with an empty value.</summary>
            [Newtonsoft.Json.JsonProperty("allowEmptyValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? AllowEmptyValue
            {
                get { return _allowEmptyValue; }
                set
                {
                    if (_allowEmptyValue != value)
                    {
                        _allowEmptyValue = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public QueryParameterSubSchemaType? Type
            {
                get { return _type; }
                set
                {
                    if (_type != value)
                    {
                        _type = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Format
            {
                get { return _format; }
                set
                {
                    if (_format != value)
                    {
                        _format = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public PrimitivesItems Items
            {
                get { return _items; }
                set
                {
                    if (_items != value)
                    {
                        _items = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("collectionFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public CollectionFormatWithMulti? CollectionFormat
            {
                get { return _collectionFormat; }
                set
                {
                    if (_collectionFormat != value)
                    {
                        _collectionFormat = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public object Default
            {
                get { return _default; }
                set
                {
                    if (_default != value)
                    {
                        _default = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("maximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public double? Maximum
            {
                get { return _maximum; }
                set
                {
                    if (_maximum != value)
                    {
                        _maximum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("exclusiveMaximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? ExclusiveMaximum
            {
                get { return _exclusiveMaximum; }
                set
                {
                    if (_exclusiveMaximum != value)
                    {
                        _exclusiveMaximum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("minimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public double? Minimum
            {
                get { return _minimum; }
                set
                {
                    if (_minimum != value)
                    {
                        _minimum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("exclusiveMinimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? ExclusiveMinimum
            {
                get { return _exclusiveMinimum; }
                set
                {
                    if (_exclusiveMinimum != value)
                    {
                        _exclusiveMinimum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("maxLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MaxLength
            {
                get { return _maxLength; }
                set
                {
                    if (_maxLength != value)
                    {
                        _maxLength = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("minLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MinLength
            {
                get { return _minLength; }
                set
                {
                    if (_minLength != value)
                    {
                        _minLength = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Pattern
            {
                get { return _pattern; }
                set
                {
                    if (_pattern != value)
                    {
                        _pattern = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("maxItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MaxItems
            {
                get { return _maxItems; }
                set
                {
                    if (_maxItems != value)
                    {
                        _maxItems = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("minItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MinItems
            {
                get { return _minItems; }
                set
                {
                    if (_minItems != value)
                    {
                        _minItems = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("uniqueItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? UniqueItems
            {
                get { return _uniqueItems; }
                set
                {
                    if (_uniqueItems != value)
                    {
                        _uniqueItems = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("enum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.ObjectModel.ObservableCollection<object> Enum
            {
                get { return _enum; }
                set
                {
                    if (_enum != value)
                    {
                        _enum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("multipleOf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public double? MultipleOf
            {
                get { return _multipleOf; }
                set
                {
                    if (_multipleOf != value)
                    {
                        _multipleOf = value;
                        RaisePropertyChanged();
                    }
                }
            }

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static QueryParameterSubSchema FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<QueryParameterSubSchema>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class FormDataParameterSubSchema : System.ComponentModel.INotifyPropertyChanged
        {
            private bool? _required = false;
            private FormDataParameterSubSchemaIn? _in;
            private string _description;
            private string _name;
            private bool? _allowEmptyValue = false;
            private FormDataParameterSubSchemaType? _type;
            private string _format;
            private PrimitivesItems _items;
            private CollectionFormatWithMulti? _collectionFormat;
            private object _default;
            private double? _maximum;
            private bool? _exclusiveMaximum;
            private double? _minimum;
            private bool? _exclusiveMinimum;
            private int? _maxLength;
            private int? _minLength;
            private string _pattern;
            private int? _maxItems;
            private int? _minItems;
            private bool? _uniqueItems;
            private System.Collections.ObjectModel.ObservableCollection<object> _enum;
            private double? _multipleOf;

            /// <summary>Determines whether or not this parameter is required or optional.</summary>
            [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? Required
            {
                get { return _required; }
                set
                {
                    if (_required != value)
                    {
                        _required = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>Determines the location of the parameter.</summary>
            [Newtonsoft.Json.JsonProperty("in", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public FormDataParameterSubSchemaIn? In
            {
                get { return _in; }
                set
                {
                    if (_in != value)
                    {
                        _in = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.</summary>
            [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Description
            {
                get { return _description; }
                set
                {
                    if (_description != value)
                    {
                        _description = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>The name of the parameter.</summary>
            [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Name
            {
                get { return _name; }
                set
                {
                    if (_name != value)
                    {
                        _name = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>allows sending a parameter by name only or with an empty value.</summary>
            [Newtonsoft.Json.JsonProperty("allowEmptyValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? AllowEmptyValue
            {
                get { return _allowEmptyValue; }
                set
                {
                    if (_allowEmptyValue != value)
                    {
                        _allowEmptyValue = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public FormDataParameterSubSchemaType? Type
            {
                get { return _type; }
                set
                {
                    if (_type != value)
                    {
                        _type = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Format
            {
                get { return _format; }
                set
                {
                    if (_format != value)
                    {
                        _format = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public PrimitivesItems Items
            {
                get { return _items; }
                set
                {
                    if (_items != value)
                    {
                        _items = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("collectionFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public CollectionFormatWithMulti? CollectionFormat
            {
                get { return _collectionFormat; }
                set
                {
                    if (_collectionFormat != value)
                    {
                        _collectionFormat = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public object Default
            {
                get { return _default; }
                set
                {
                    if (_default != value)
                    {
                        _default = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("maximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public double? Maximum
            {
                get { return _maximum; }
                set
                {
                    if (_maximum != value)
                    {
                        _maximum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("exclusiveMaximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? ExclusiveMaximum
            {
                get { return _exclusiveMaximum; }
                set
                {
                    if (_exclusiveMaximum != value)
                    {
                        _exclusiveMaximum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("minimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public double? Minimum
            {
                get { return _minimum; }
                set
                {
                    if (_minimum != value)
                    {
                        _minimum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("exclusiveMinimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? ExclusiveMinimum
            {
                get { return _exclusiveMinimum; }
                set
                {
                    if (_exclusiveMinimum != value)
                    {
                        _exclusiveMinimum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("maxLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MaxLength
            {
                get { return _maxLength; }
                set
                {
                    if (_maxLength != value)
                    {
                        _maxLength = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("minLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MinLength
            {
                get { return _minLength; }
                set
                {
                    if (_minLength != value)
                    {
                        _minLength = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Pattern
            {
                get { return _pattern; }
                set
                {
                    if (_pattern != value)
                    {
                        _pattern = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("maxItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MaxItems
            {
                get { return _maxItems; }
                set
                {
                    if (_maxItems != value)
                    {
                        _maxItems = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("minItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MinItems
            {
                get { return _minItems; }
                set
                {
                    if (_minItems != value)
                    {
                        _minItems = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("uniqueItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? UniqueItems
            {
                get { return _uniqueItems; }
                set
                {
                    if (_uniqueItems != value)
                    {
                        _uniqueItems = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("enum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.ObjectModel.ObservableCollection<object> Enum
            {
                get { return _enum; }
                set
                {
                    if (_enum != value)
                    {
                        _enum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("multipleOf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public double? MultipleOf
            {
                get { return _multipleOf; }
                set
                {
                    if (_multipleOf != value)
                    {
                        _multipleOf = value;
                        RaisePropertyChanged();
                    }
                }
            }

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static FormDataParameterSubSchema FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<FormDataParameterSubSchema>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class PathParameterSubSchema : System.ComponentModel.INotifyPropertyChanged
        {
            private bool _required;
            private PathParameterSubSchemaIn? _in;
            private string _description;
            private string _name;
            private PathParameterSubSchemaType? _type;
            private string _format;
            private PrimitivesItems _items;
            private CollectionFormat? _collectionFormat;
            private object _default;
            private double? _maximum;
            private bool? _exclusiveMaximum;
            private double? _minimum;
            private bool? _exclusiveMinimum;
            private int? _maxLength;
            private int? _minLength;
            private string _pattern;
            private int? _maxItems;
            private int? _minItems;
            private bool? _uniqueItems;
            private System.Collections.ObjectModel.ObservableCollection<object> _enum;
            private double? _multipleOf;

            /// <summary>Determines whether or not this parameter is required or optional.</summary>
            [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.Always)]
            public bool Required
            {
                get { return _required; }
                set
                {
                    if (_required != value)
                    {
                        _required = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>Determines the location of the parameter.</summary>
            [Newtonsoft.Json.JsonProperty("in", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public PathParameterSubSchemaIn? In
            {
                get { return _in; }
                set
                {
                    if (_in != value)
                    {
                        _in = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.</summary>
            [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Description
            {
                get { return _description; }
                set
                {
                    if (_description != value)
                    {
                        _description = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>The name of the parameter.</summary>
            [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Name
            {
                get { return _name; }
                set
                {
                    if (_name != value)
                    {
                        _name = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public PathParameterSubSchemaType? Type
            {
                get { return _type; }
                set
                {
                    if (_type != value)
                    {
                        _type = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Format
            {
                get { return _format; }
                set
                {
                    if (_format != value)
                    {
                        _format = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public PrimitivesItems Items
            {
                get { return _items; }
                set
                {
                    if (_items != value)
                    {
                        _items = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("collectionFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public CollectionFormat? CollectionFormat
            {
                get { return _collectionFormat; }
                set
                {
                    if (_collectionFormat != value)
                    {
                        _collectionFormat = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public object Default
            {
                get { return _default; }
                set
                {
                    if (_default != value)
                    {
                        _default = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("maximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public double? Maximum
            {
                get { return _maximum; }
                set
                {
                    if (_maximum != value)
                    {
                        _maximum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("exclusiveMaximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? ExclusiveMaximum
            {
                get { return _exclusiveMaximum; }
                set
                {
                    if (_exclusiveMaximum != value)
                    {
                        _exclusiveMaximum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("minimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public double? Minimum
            {
                get { return _minimum; }
                set
                {
                    if (_minimum != value)
                    {
                        _minimum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("exclusiveMinimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? ExclusiveMinimum
            {
                get { return _exclusiveMinimum; }
                set
                {
                    if (_exclusiveMinimum != value)
                    {
                        _exclusiveMinimum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("maxLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MaxLength
            {
                get { return _maxLength; }
                set
                {
                    if (_maxLength != value)
                    {
                        _maxLength = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("minLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MinLength
            {
                get { return _minLength; }
                set
                {
                    if (_minLength != value)
                    {
                        _minLength = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Pattern
            {
                get { return _pattern; }
                set
                {
                    if (_pattern != value)
                    {
                        _pattern = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("maxItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MaxItems
            {
                get { return _maxItems; }
                set
                {
                    if (_maxItems != value)
                    {
                        _maxItems = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("minItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MinItems
            {
                get { return _minItems; }
                set
                {
                    if (_minItems != value)
                    {
                        _minItems = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("uniqueItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? UniqueItems
            {
                get { return _uniqueItems; }
                set
                {
                    if (_uniqueItems != value)
                    {
                        _uniqueItems = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("enum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.ObjectModel.ObservableCollection<object> Enum
            {
                get { return _enum; }
                set
                {
                    if (_enum != value)
                    {
                        _enum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("multipleOf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public double? MultipleOf
            {
                get { return _multipleOf; }
                set
                {
                    if (_multipleOf != value)
                    {
                        _multipleOf = value;
                        RaisePropertyChanged();
                    }
                }
            }

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static PathParameterSubSchema FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<PathParameterSubSchema>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class NonBodyParameter : System.ComponentModel.INotifyPropertyChanged
        {

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static NonBodyParameter FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<NonBodyParameter>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class Parameter : System.ComponentModel.INotifyPropertyChanged
        {

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static Parameter FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<Parameter>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        /// <summary>A deterministic version of a JSON Schema object.</summary>
        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class Schema : System.ComponentModel.INotifyPropertyChanged
        {
            private string ___referencePath;
            private string _format;
            private string _title;
            private string _description;
            private object _default;
            private double? _multipleOf;
            private double? _maximum;
            private bool? _exclusiveMaximum;
            private double? _minimum;
            private bool? _exclusiveMinimum;
            private int? _maxLength;
            private int? _minLength;
            private string _pattern;
            private int? _maxItems;
            private int? _minItems;
            private bool? _uniqueItems;
            private int? _maxProperties;
            private int? _minProperties;
            private System.Collections.ObjectModel.ObservableCollection<string> _required;
            private System.Collections.ObjectModel.ObservableCollection<object> _enum;
            private AdditionalProperties _additionalProperties;
            private Type _type;
            private Items _items;
            private System.Collections.ObjectModel.ObservableCollection<Schema> _allOf;
            private System.Collections.Generic.Dictionary<string, Schema> _properties;
            private string _discriminator;
            private bool? _readOnly = false;
            private Xml _xml;
            private ExternalDocs _externalDocs;
            private object _example;

            [Newtonsoft.Json.JsonProperty("__referencePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string __referencePath
            {
                get { return ___referencePath; }
                set
                {
                    if (___referencePath != value)
                    {
                        ___referencePath = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Format
            {
                get { return _format; }
                set
                {
                    if (_format != value)
                    {
                        _format = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Title
            {
                get { return _title; }
                set
                {
                    if (_title != value)
                    {
                        _title = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Description
            {
                get { return _description; }
                set
                {
                    if (_description != value)
                    {
                        _description = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public object Default
            {
                get { return _default; }
                set
                {
                    if (_default != value)
                    {
                        _default = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("multipleOf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public double? MultipleOf
            {
                get { return _multipleOf; }
                set
                {
                    if (_multipleOf != value)
                    {
                        _multipleOf = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("maximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public double? Maximum
            {
                get { return _maximum; }
                set
                {
                    if (_maximum != value)
                    {
                        _maximum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("exclusiveMaximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? ExclusiveMaximum
            {
                get { return _exclusiveMaximum; }
                set
                {
                    if (_exclusiveMaximum != value)
                    {
                        _exclusiveMaximum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("minimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public double? Minimum
            {
                get { return _minimum; }
                set
                {
                    if (_minimum != value)
                    {
                        _minimum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("exclusiveMinimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? ExclusiveMinimum
            {
                get { return _exclusiveMinimum; }
                set
                {
                    if (_exclusiveMinimum != value)
                    {
                        _exclusiveMinimum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("maxLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MaxLength
            {
                get { return _maxLength; }
                set
                {
                    if (_maxLength != value)
                    {
                        _maxLength = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("minLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MinLength
            {
                get { return _minLength; }
                set
                {
                    if (_minLength != value)
                    {
                        _minLength = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Pattern
            {
                get { return _pattern; }
                set
                {
                    if (_pattern != value)
                    {
                        _pattern = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("maxItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MaxItems
            {
                get { return _maxItems; }
                set
                {
                    if (_maxItems != value)
                    {
                        _maxItems = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("minItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MinItems
            {
                get { return _minItems; }
                set
                {
                    if (_minItems != value)
                    {
                        _minItems = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("uniqueItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? UniqueItems
            {
                get { return _uniqueItems; }
                set
                {
                    if (_uniqueItems != value)
                    {
                        _uniqueItems = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("maxProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MaxProperties
            {
                get { return _maxProperties; }
                set
                {
                    if (_maxProperties != value)
                    {
                        _maxProperties = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("minProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MinProperties
            {
                get { return _minProperties; }
                set
                {
                    if (_minProperties != value)
                    {
                        _minProperties = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.ObjectModel.ObservableCollection<string> Required
            {
                get { return _required; }
                set
                {
                    if (_required != value)
                    {
                        _required = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("enum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.ObjectModel.ObservableCollection<object> Enum
            {
                get { return _enum; }
                set
                {
                    if (_enum != value)
                    {
                        _enum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("additionalProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public AdditionalProperties AdditionalProperties
            {
                get { return _additionalProperties; }
                set
                {
                    if (_additionalProperties != value)
                    {
                        _additionalProperties = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public Type Type
            {
                get { return _type; }
                set
                {
                    if (_type != value)
                    {
                        _type = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public Items Items
            {
                get { return _items; }
                set
                {
                    if (_items != value)
                    {
                        _items = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("allOf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.ObjectModel.ObservableCollection<Schema> AllOf
            {
                get { return _allOf; }
                set
                {
                    if (_allOf != value)
                    {
                        _allOf = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.Generic.Dictionary<string, Schema> Properties
            {
                get { return _properties; }
                set
                {
                    if (_properties != value)
                    {
                        _properties = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("discriminator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Discriminator
            {
                get { return _discriminator; }
                set
                {
                    if (_discriminator != value)
                    {
                        _discriminator = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("readOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? ReadOnly
            {
                get { return _readOnly; }
                set
                {
                    if (_readOnly != value)
                    {
                        _readOnly = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("xml", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public Xml Xml
            {
                get { return _xml; }
                set
                {
                    if (_xml != value)
                    {
                        _xml = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("externalDocs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public ExternalDocs ExternalDocs
            {
                get { return _externalDocs; }
                set
                {
                    if (_externalDocs != value)
                    {
                        _externalDocs = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("example", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public object Example
            {
                get { return _example; }
                set
                {
                    if (_example != value)
                    {
                        _example = value;
                        RaisePropertyChanged();
                    }
                }
            }

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static Schema FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<Schema>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        /// <summary>A deterministic version of a JSON Schema object.</summary>
        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class FileSchema : System.ComponentModel.INotifyPropertyChanged
        {
            private string _format;
            private string _title;
            private string _description;
            private object _default;
            private System.Collections.ObjectModel.ObservableCollection<string> _required;
            private FileSchemaType _type;
            private bool? _readOnly = false;
            private ExternalDocs _externalDocs;
            private object _example;

            [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Format
            {
                get { return _format; }
                set
                {
                    if (_format != value)
                    {
                        _format = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Title
            {
                get { return _title; }
                set
                {
                    if (_title != value)
                    {
                        _title = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Description
            {
                get { return _description; }
                set
                {
                    if (_description != value)
                    {
                        _description = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public object Default
            {
                get { return _default; }
                set
                {
                    if (_default != value)
                    {
                        _default = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.ObjectModel.ObservableCollection<string> Required
            {
                get { return _required; }
                set
                {
                    if (_required != value)
                    {
                        _required = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public FileSchemaType Type
            {
                get { return _type; }
                set
                {
                    if (_type != value)
                    {
                        _type = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("readOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? ReadOnly
            {
                get { return _readOnly; }
                set
                {
                    if (_readOnly != value)
                    {
                        _readOnly = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("externalDocs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public ExternalDocs ExternalDocs
            {
                get { return _externalDocs; }
                set
                {
                    if (_externalDocs != value)
                    {
                        _externalDocs = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("example", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public object Example
            {
                get { return _example; }
                set
                {
                    if (_example != value)
                    {
                        _example = value;
                        RaisePropertyChanged();
                    }
                }
            }

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static FileSchema FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<FileSchema>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class PrimitivesItems : System.ComponentModel.INotifyPropertyChanged
        {
            private PrimitivesItemsType? _type;
            private string _format;
            private PrimitivesItems _items;
            private CollectionFormat? _collectionFormat;
            private object _default;
            private double? _maximum;
            private bool? _exclusiveMaximum;
            private double? _minimum;
            private bool? _exclusiveMinimum;
            private int? _maxLength;
            private int? _minLength;
            private string _pattern;
            private int? _maxItems;
            private int? _minItems;
            private bool? _uniqueItems;
            private System.Collections.ObjectModel.ObservableCollection<object> _enum;
            private double? _multipleOf;

            [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public PrimitivesItemsType? Type
            {
                get { return _type; }
                set
                {
                    if (_type != value)
                    {
                        _type = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Format
            {
                get { return _format; }
                set
                {
                    if (_format != value)
                    {
                        _format = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public PrimitivesItems Items
            {
                get { return _items; }
                set
                {
                    if (_items != value)
                    {
                        _items = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("collectionFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public CollectionFormat? CollectionFormat
            {
                get { return _collectionFormat; }
                set
                {
                    if (_collectionFormat != value)
                    {
                        _collectionFormat = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public object Default
            {
                get { return _default; }
                set
                {
                    if (_default != value)
                    {
                        _default = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("maximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public double? Maximum
            {
                get { return _maximum; }
                set
                {
                    if (_maximum != value)
                    {
                        _maximum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("exclusiveMaximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? ExclusiveMaximum
            {
                get { return _exclusiveMaximum; }
                set
                {
                    if (_exclusiveMaximum != value)
                    {
                        _exclusiveMaximum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("minimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public double? Minimum
            {
                get { return _minimum; }
                set
                {
                    if (_minimum != value)
                    {
                        _minimum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("exclusiveMinimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? ExclusiveMinimum
            {
                get { return _exclusiveMinimum; }
                set
                {
                    if (_exclusiveMinimum != value)
                    {
                        _exclusiveMinimum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("maxLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MaxLength
            {
                get { return _maxLength; }
                set
                {
                    if (_maxLength != value)
                    {
                        _maxLength = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("minLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MinLength
            {
                get { return _minLength; }
                set
                {
                    if (_minLength != value)
                    {
                        _minLength = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Pattern
            {
                get { return _pattern; }
                set
                {
                    if (_pattern != value)
                    {
                        _pattern = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("maxItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MaxItems
            {
                get { return _maxItems; }
                set
                {
                    if (_maxItems != value)
                    {
                        _maxItems = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("minItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? MinItems
            {
                get { return _minItems; }
                set
                {
                    if (_minItems != value)
                    {
                        _minItems = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("uniqueItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? UniqueItems
            {
                get { return _uniqueItems; }
                set
                {
                    if (_uniqueItems != value)
                    {
                        _uniqueItems = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("enum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.ObjectModel.ObservableCollection<object> Enum
            {
                get { return _enum; }
                set
                {
                    if (_enum != value)
                    {
                        _enum = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("multipleOf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public double? MultipleOf
            {
                get { return _multipleOf; }
                set
                {
                    if (_multipleOf != value)
                    {
                        _multipleOf = value;
                        RaisePropertyChanged();
                    }
                }
            }

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static PrimitivesItems FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<PrimitivesItems>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class Xml : System.ComponentModel.INotifyPropertyChanged
        {
            private string _name;
            private string _namespace;
            private string _prefix;
            private bool? _attribute = false;
            private bool? _wrapped = false;

            [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Name
            {
                get { return _name; }
                set
                {
                    if (_name != value)
                    {
                        _name = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("namespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Namespace
            {
                get { return _namespace; }
                set
                {
                    if (_namespace != value)
                    {
                        _namespace = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("prefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Prefix
            {
                get { return _prefix; }
                set
                {
                    if (_prefix != value)
                    {
                        _prefix = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("attribute", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? Attribute
            {
                get { return _attribute; }
                set
                {
                    if (_attribute != value)
                    {
                        _attribute = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("wrapped", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? Wrapped
            {
                get { return _wrapped; }
                set
                {
                    if (_wrapped != value)
                    {
                        _wrapped = value;
                        RaisePropertyChanged();
                    }
                }
            }

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static Xml FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<Xml>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class Tag : System.ComponentModel.INotifyPropertyChanged
        {
            private string _name;
            private string _description;
            private ExternalDocs _externalDocs;

            [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            public string Name
            {
                get { return _name; }
                set
                {
                    if (_name != value)
                    {
                        _name = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Description
            {
                get { return _description; }
                set
                {
                    if (_description != value)
                    {
                        _description = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("externalDocs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public ExternalDocs ExternalDocs
            {
                get { return _externalDocs; }
                set
                {
                    if (_externalDocs != value)
                    {
                        _externalDocs = value;
                        RaisePropertyChanged();
                    }
                }
            }

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static Tag FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<Tag>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class BasicAuthenticationSecurity : System.ComponentModel.INotifyPropertyChanged
        {
            private BasicAuthenticationSecurityType _type;
            private string _description;

            [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public BasicAuthenticationSecurityType Type
            {
                get { return _type; }
                set
                {
                    if (_type != value)
                    {
                        _type = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Description
            {
                get { return _description; }
                set
                {
                    if (_description != value)
                    {
                        _description = value;
                        RaisePropertyChanged();
                    }
                }
            }

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static BasicAuthenticationSecurity FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<BasicAuthenticationSecurity>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class ApiKeySecurity : System.ComponentModel.INotifyPropertyChanged
        {
            private ApiKeySecurityType _type;
            private string _name;
            private ApiKeySecurityIn _in;
            private string _description;

            [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public ApiKeySecurityType Type
            {
                get { return _type; }
                set
                {
                    if (_type != value)
                    {
                        _type = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            public string Name
            {
                get { return _name; }
                set
                {
                    if (_name != value)
                    {
                        _name = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("in", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public ApiKeySecurityIn In
            {
                get { return _in; }
                set
                {
                    if (_in != value)
                    {
                        _in = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Description
            {
                get { return _description; }
                set
                {
                    if (_description != value)
                    {
                        _description = value;
                        RaisePropertyChanged();
                    }
                }
            }

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static ApiKeySecurity FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<ApiKeySecurity>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class Oauth2ImplicitSecurity : System.ComponentModel.INotifyPropertyChanged
        {
            private Oauth2ImplicitSecurityType _type;
            private Oauth2ImplicitSecurityFlow _flow;
            private System.Collections.Generic.Dictionary<string, string> _scopes;
            private string _authorizationUrl;
            private string _description;

            [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public Oauth2ImplicitSecurityType Type
            {
                get { return _type; }
                set
                {
                    if (_type != value)
                    {
                        _type = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("flow", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public Oauth2ImplicitSecurityFlow Flow
            {
                get { return _flow; }
                set
                {
                    if (_flow != value)
                    {
                        _flow = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("scopes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.Generic.Dictionary<string, string> Scopes
            {
                get { return _scopes; }
                set
                {
                    if (_scopes != value)
                    {
                        _scopes = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("authorizationUrl", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            public string AuthorizationUrl
            {
                get { return _authorizationUrl; }
                set
                {
                    if (_authorizationUrl != value)
                    {
                        _authorizationUrl = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Description
            {
                get { return _description; }
                set
                {
                    if (_description != value)
                    {
                        _description = value;
                        RaisePropertyChanged();
                    }
                }
            }

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static Oauth2ImplicitSecurity FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<Oauth2ImplicitSecurity>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class Oauth2PasswordSecurity : System.ComponentModel.INotifyPropertyChanged
        {
            private Oauth2PasswordSecurityType _type;
            private Oauth2PasswordSecurityFlow _flow;
            private System.Collections.Generic.Dictionary<string, string> _scopes;
            private string _tokenUrl;
            private string _description;

            [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public Oauth2PasswordSecurityType Type
            {
                get { return _type; }
                set
                {
                    if (_type != value)
                    {
                        _type = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("flow", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public Oauth2PasswordSecurityFlow Flow
            {
                get { return _flow; }
                set
                {
                    if (_flow != value)
                    {
                        _flow = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("scopes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.Generic.Dictionary<string, string> Scopes
            {
                get { return _scopes; }
                set
                {
                    if (_scopes != value)
                    {
                        _scopes = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("tokenUrl", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            public string TokenUrl
            {
                get { return _tokenUrl; }
                set
                {
                    if (_tokenUrl != value)
                    {
                        _tokenUrl = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Description
            {
                get { return _description; }
                set
                {
                    if (_description != value)
                    {
                        _description = value;
                        RaisePropertyChanged();
                    }
                }
            }

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static Oauth2PasswordSecurity FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<Oauth2PasswordSecurity>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class Oauth2ApplicationSecurity : System.ComponentModel.INotifyPropertyChanged
        {
            private Oauth2ApplicationSecurityType _type;
            private Oauth2ApplicationSecurityFlow _flow;
            private System.Collections.Generic.Dictionary<string, string> _scopes;
            private string _tokenUrl;
            private string _description;

            [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public Oauth2ApplicationSecurityType Type
            {
                get { return _type; }
                set
                {
                    if (_type != value)
                    {
                        _type = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("flow", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public Oauth2ApplicationSecurityFlow Flow
            {
                get { return _flow; }
                set
                {
                    if (_flow != value)
                    {
                        _flow = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("scopes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.Generic.Dictionary<string, string> Scopes
            {
                get { return _scopes; }
                set
                {
                    if (_scopes != value)
                    {
                        _scopes = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("tokenUrl", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            public string TokenUrl
            {
                get { return _tokenUrl; }
                set
                {
                    if (_tokenUrl != value)
                    {
                        _tokenUrl = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Description
            {
                get { return _description; }
                set
                {
                    if (_description != value)
                    {
                        _description = value;
                        RaisePropertyChanged();
                    }
                }
            }

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static Oauth2ApplicationSecurity FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<Oauth2ApplicationSecurity>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class Oauth2AccessCodeSecurity : System.ComponentModel.INotifyPropertyChanged
        {
            private Oauth2AccessCodeSecurityType _type;
            private Oauth2AccessCodeSecurityFlow _flow;
            private System.Collections.Generic.Dictionary<string, string> _scopes;
            private string _authorizationUrl;
            private string _tokenUrl;
            private string _description;

            [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public Oauth2AccessCodeSecurityType Type
            {
                get { return _type; }
                set
                {
                    if (_type != value)
                    {
                        _type = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("flow", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public Oauth2AccessCodeSecurityFlow Flow
            {
                get { return _flow; }
                set
                {
                    if (_flow != value)
                    {
                        _flow = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("scopes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.Generic.Dictionary<string, string> Scopes
            {
                get { return _scopes; }
                set
                {
                    if (_scopes != value)
                    {
                        _scopes = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("authorizationUrl", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            public string AuthorizationUrl
            {
                get { return _authorizationUrl; }
                set
                {
                    if (_authorizationUrl != value)
                    {
                        _authorizationUrl = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("tokenUrl", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            public string TokenUrl
            {
                get { return _tokenUrl; }
                set
                {
                    if (_tokenUrl != value)
                    {
                        _tokenUrl = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string Description
            {
                get { return _description; }
                set
                {
                    if (_description != value)
                    {
                        _description = value;
                        RaisePropertyChanged();
                    }
                }
            }

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static Oauth2AccessCodeSecurity FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<Oauth2AccessCodeSecurity>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public enum CollectionFormat
        {
            [System.Runtime.Serialization.EnumMember(Value = "csv")]

            Csv = 0,


            [System.Runtime.Serialization.EnumMember(Value = "ssv")]

            Ssv = 1,


            [System.Runtime.Serialization.EnumMember(Value = "tsv")]

            Tsv = 2,


            [System.Runtime.Serialization.EnumMember(Value = "pipes")]

            Pipes = 3,


        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public enum CollectionFormatWithMulti
        {
            [System.Runtime.Serialization.EnumMember(Value = "csv")]

            Csv = 0,


            [System.Runtime.Serialization.EnumMember(Value = "ssv")]

            Ssv = 1,


            [System.Runtime.Serialization.EnumMember(Value = "tsv")]

            Tsv = 2,


            [System.Runtime.Serialization.EnumMember(Value = "pipes")]

            Pipes = 3,


            [System.Runtime.Serialization.EnumMember(Value = "multi")]

            Multi = 4,


        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class JsonReference : System.ComponentModel.INotifyPropertyChanged
        {
            private string ___referencePath;

            [Newtonsoft.Json.JsonProperty("__referencePath", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            public string __referencePath
            {
                get { return ___referencePath; }
                set
                {
                    if (___referencePath != value)
                    {
                        ___referencePath = value;
                        RaisePropertyChanged();
                    }
                }
            }

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static JsonReference FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<JsonReference>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class Anonymous : System.ComponentModel.INotifyPropertyChanged
        {
            private Swagger _swagger;
            private Info _info = new Info();
            private string _host;
            private string _basePath;
            private System.Collections.ObjectModel.ObservableCollection<Anonymous3> _schemes;
            private System.Collections.ObjectModel.ObservableCollection<string> _consumes;
            private System.Collections.ObjectModel.ObservableCollection<string> _produces;
            private System.Collections.Generic.Dictionary<string, object> _paths = new System.Collections.Generic.Dictionary<string, object>();
            private System.Collections.Generic.Dictionary<string, Schema> _definitions;
            private System.Collections.Generic.Dictionary<string, Parameter> _parameters;
            private System.Collections.Generic.Dictionary<string, Response> _responses;
            private System.Collections.ObjectModel.ObservableCollection<System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<string>>> _security;
            private System.Collections.Generic.Dictionary<string, Anonymous4> _securityDefinitions;
            private System.Collections.ObjectModel.ObservableCollection<Tag> _tags;
            private ExternalDocs _externalDocs;

            /// <summary>The Swagger version of this document.</summary>
            [Newtonsoft.Json.JsonProperty("swagger", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public Swagger Swagger
            {
                get { return _swagger; }
                set
                {
                    if (_swagger != value)
                    {
                        _swagger = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            public Info Info
            {
                get { return _info; }
                set
                {
                    if (_info != value)
                    {
                        _info = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>The host (name or ip) of the API. Example: 'swagger.io'</summary>
            [Newtonsoft.Json.JsonProperty("host", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            [System.ComponentModel.DataAnnotations.RegularExpression(@"^[^{}/ :\\]+(?::\d+)?$")]
            public string Host
            {
                get { return _host; }
                set
                {
                    if (_host != value)
                    {
                        _host = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>The base path to the API. Example: '/api'.</summary>
            [Newtonsoft.Json.JsonProperty("basePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            [System.ComponentModel.DataAnnotations.RegularExpression(@"^/")]
            public string BasePath
            {
                get { return _basePath; }
                set
                {
                    if (_basePath != value)
                    {
                        _basePath = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("schemes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public System.Collections.ObjectModel.ObservableCollection<Anonymous3> Schemes
            {
                get { return _schemes; }
                set
                {
                    if (_schemes != value)
                    {
                        _schemes = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>A list of MIME types accepted by the API.</summary>
            [Newtonsoft.Json.JsonProperty("consumes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.ObjectModel.ObservableCollection<string> Consumes
            {
                get { return _consumes; }
                set
                {
                    if (_consumes != value)
                    {
                        _consumes = value;
                        RaisePropertyChanged();
                    }
                }
            }

            /// <summary>A list of MIME types the API can produce.</summary>
            [Newtonsoft.Json.JsonProperty("produces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.ObjectModel.ObservableCollection<string> Produces
            {
                get { return _produces; }
                set
                {
                    if (_produces != value)
                    {
                        _produces = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("paths", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            public System.Collections.Generic.Dictionary<string, object> Paths
            {
                get { return _paths; }
                set
                {
                    if (_paths != value)
                    {
                        _paths = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("definitions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.Generic.Dictionary<string, Schema> Definitions
            {
                get { return _definitions; }
                set
                {
                    if (_definitions != value)
                    {
                        _definitions = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.Generic.Dictionary<string, Parameter> Parameters
            {
                get { return _parameters; }
                set
                {
                    if (_parameters != value)
                    {
                        _parameters = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("responses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.Generic.Dictionary<string, Response> Responses
            {
                get { return _responses; }
                set
                {
                    if (_responses != value)
                    {
                        _responses = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("security", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.ObjectModel.ObservableCollection<System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<string>>> Security
            {
                get { return _security; }
                set
                {
                    if (_security != value)
                    {
                        _security = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("securityDefinitions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.Generic.Dictionary<string, Anonymous4> SecurityDefinitions
            {
                get { return _securityDefinitions; }
                set
                {
                    if (_securityDefinitions != value)
                    {
                        _securityDefinitions = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public System.Collections.ObjectModel.ObservableCollection<Tag> Tags
            {
                get { return _tags; }
                set
                {
                    if (_tags != value)
                    {
                        _tags = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("externalDocs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public ExternalDocs ExternalDocs
            {
                get { return _externalDocs; }
                set
                {
                    if (_externalDocs != value)
                    {
                        _externalDocs = value;
                        RaisePropertyChanged();
                    }
                }
            }

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static Anonymous FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class Anonymous2 : System.ComponentModel.INotifyPropertyChanged
        {

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static Anonymous2 FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous2>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public enum Anonymous3
        {
            [System.Runtime.Serialization.EnumMember(Value = "http")]

            Http = 0,


            [System.Runtime.Serialization.EnumMember(Value = "https")]

            Https = 1,


            [System.Runtime.Serialization.EnumMember(Value = "ws")]

            Ws = 2,


            [System.Runtime.Serialization.EnumMember(Value = "wss")]

            Wss = 3,


        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public enum HeaderType
        {
            [System.Runtime.Serialization.EnumMember(Value = "string")]

            String = 0,


            [System.Runtime.Serialization.EnumMember(Value = "number")]

            Number = 1,


            [System.Runtime.Serialization.EnumMember(Value = "integer")]

            Integer = 2,


            [System.Runtime.Serialization.EnumMember(Value = "boolean")]

            Boolean = 3,


            [System.Runtime.Serialization.EnumMember(Value = "array")]

            Array = 4,


        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public enum BodyParameterIn
        {
            [System.Runtime.Serialization.EnumMember(Value = "body")]

            Body = 0,


        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public enum HeaderParameterSubSchemaIn
        {
            [System.Runtime.Serialization.EnumMember(Value = "header")]

            Header = 0,


        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public enum HeaderParameterSubSchemaType
        {
            [System.Runtime.Serialization.EnumMember(Value = "string")]

            String = 0,


            [System.Runtime.Serialization.EnumMember(Value = "number")]

            Number = 1,


            [System.Runtime.Serialization.EnumMember(Value = "boolean")]

            Boolean = 2,


            [System.Runtime.Serialization.EnumMember(Value = "integer")]

            Integer = 3,


            [System.Runtime.Serialization.EnumMember(Value = "array")]

            Array = 4,


        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public enum QueryParameterSubSchemaIn
        {
            [System.Runtime.Serialization.EnumMember(Value = "query")]

            Query = 0,


        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public enum QueryParameterSubSchemaType
        {
            [System.Runtime.Serialization.EnumMember(Value = "string")]

            String = 0,


            [System.Runtime.Serialization.EnumMember(Value = "number")]

            Number = 1,


            [System.Runtime.Serialization.EnumMember(Value = "boolean")]

            Boolean = 2,


            [System.Runtime.Serialization.EnumMember(Value = "integer")]

            Integer = 3,


            [System.Runtime.Serialization.EnumMember(Value = "array")]

            Array = 4,


        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public enum FormDataParameterSubSchemaIn
        {
            [System.Runtime.Serialization.EnumMember(Value = "formData")]

            FormData = 0,


        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public enum FormDataParameterSubSchemaType
        {
            [System.Runtime.Serialization.EnumMember(Value = "string")]

            String = 0,


            [System.Runtime.Serialization.EnumMember(Value = "number")]

            Number = 1,


            [System.Runtime.Serialization.EnumMember(Value = "boolean")]

            Boolean = 2,


            [System.Runtime.Serialization.EnumMember(Value = "integer")]

            Integer = 3,


            [System.Runtime.Serialization.EnumMember(Value = "array")]

            Array = 4,


            [System.Runtime.Serialization.EnumMember(Value = "file")]

            File = 5,


        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public enum PathParameterSubSchemaIn
        {
            [System.Runtime.Serialization.EnumMember(Value = "path")]

            Path = 0,


        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public enum PathParameterSubSchemaType
        {
            [System.Runtime.Serialization.EnumMember(Value = "string")]

            String = 0,


            [System.Runtime.Serialization.EnumMember(Value = "number")]

            Number = 1,


            [System.Runtime.Serialization.EnumMember(Value = "boolean")]

            Boolean = 2,


            [System.Runtime.Serialization.EnumMember(Value = "integer")]

            Integer = 3,


            [System.Runtime.Serialization.EnumMember(Value = "array")]

            Array = 4,


        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class AdditionalProperties : System.ComponentModel.INotifyPropertyChanged
        {

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static AdditionalProperties FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<AdditionalProperties>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class Type : System.ComponentModel.INotifyPropertyChanged
        {

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static Type FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<Type>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class Items : System.ComponentModel.INotifyPropertyChanged
        {

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static Items FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<Items>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public enum FileSchemaType
        {
            [System.Runtime.Serialization.EnumMember(Value = "file")]

            File = 0,


        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public enum PrimitivesItemsType
        {
            [System.Runtime.Serialization.EnumMember(Value = "string")]

            String = 0,


            [System.Runtime.Serialization.EnumMember(Value = "number")]

            Number = 1,


            [System.Runtime.Serialization.EnumMember(Value = "integer")]

            Integer = 2,


            [System.Runtime.Serialization.EnumMember(Value = "boolean")]

            Boolean = 3,


            [System.Runtime.Serialization.EnumMember(Value = "array")]

            Array = 4,


        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public enum BasicAuthenticationSecurityType
        {
            [System.Runtime.Serialization.EnumMember(Value = "basic")]

            Basic = 0,


        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public enum ApiKeySecurityType
        {
            [System.Runtime.Serialization.EnumMember(Value = "apiKey")]

            ApiKey = 0,


        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public enum ApiKeySecurityIn
        {
            [System.Runtime.Serialization.EnumMember(Value = "header")]

            Header = 0,


            [System.Runtime.Serialization.EnumMember(Value = "query")]

            Query = 1,


        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public enum Oauth2ImplicitSecurityType
        {
            [System.Runtime.Serialization.EnumMember(Value = "oauth2")]

            Oauth2 = 0,


        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public enum Oauth2ImplicitSecurityFlow
        {
            [System.Runtime.Serialization.EnumMember(Value = "implicit")]

            Implicit = 0,


        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public enum Oauth2PasswordSecurityType
        {
            [System.Runtime.Serialization.EnumMember(Value = "oauth2")]

            Oauth2 = 0,


        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public enum Oauth2PasswordSecurityFlow
        {
            [System.Runtime.Serialization.EnumMember(Value = "password")]

            Password = 0,


        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public enum Oauth2ApplicationSecurityType
        {
            [System.Runtime.Serialization.EnumMember(Value = "oauth2")]

            Oauth2 = 0,


        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public enum Oauth2ApplicationSecurityFlow
        {
            [System.Runtime.Serialization.EnumMember(Value = "application")]

            Application = 0,


        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public enum Oauth2AccessCodeSecurityType
        {
            [System.Runtime.Serialization.EnumMember(Value = "oauth2")]

            Oauth2 = 0,


        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public enum Oauth2AccessCodeSecurityFlow
        {
            [System.Runtime.Serialization.EnumMember(Value = "accessCode")]

            AccessCode = 0,


        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public enum Swagger
        {
            [System.Runtime.Serialization.EnumMember(Value = "2.0")]

            _2_0 = 0,


        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class Anonymous4 : System.ComponentModel.INotifyPropertyChanged
        {

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static Anonymous4 FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous4>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

    }
}
